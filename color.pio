; Drive a 400x300 @ 60Hz (upscaled to 800x600) 8-bit-color VGA signal over 8 digital IO pins.
;  - color.pio manages the 8 color pins, for 8 bit color. The hsync and vsync lines are managed separately.

.program color

; Sync color state machine

; USE FOR DORM MONITOR
; set x 14 [24]    ; Active frame (600 lines, 600 cycles, 24 from set + 18*32 from loop)

; Use for TV in the basement at home
; set x 31 [31]
; nop [1]

; waitloop:
;     nop [30]         ; 32 cycle loop -- nop + 30 + jmp = 32
;     jmp x-- waitloop

.wrap_target
    out pins 8 ; Shift 8 bits of data from the OSR to the pins.
.wrap

% c-sdk {

// Helper function (for use in C program) to initialize this PIO program

static inline void color_program_init(PIO pio, uint sm, uint offset, uint dataPin, uint divider) {
    //Initialize 8 data pins for 8 bit color (R1, R2, R3, G1, G2, G3, B1, B2), RRRGGGBB
    pio_gpio_init(pio, dataPin);
    pio_gpio_init(pio, dataPin + 1);
    pio_gpio_init(pio, dataPin + 2);
    pio_gpio_init(pio, dataPin + 3);
    pio_gpio_init(pio, dataPin + 4);
    pio_gpio_init(pio, dataPin + 5);
    pio_gpio_init(pio, dataPin + 6);
    pio_gpio_init(pio, dataPin + 7);

    //Set all 8 pins to outputs
    pio_sm_set_consecutive_pindirs(pio, sm, dataPin, 8, true);

    //Get default state machine configuration
    pio_sm_config c = color_program_get_default_config(offset);

    //Set all 8 pins to 'out' pins
    sm_config_set_out_pins(&c, dataPin, 8);

    //Preset pins to LOW
    pio_sm_set_pins(pio, sm, 0);

    //Setup FIFO
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    
    //Setup state machine clock divider
    sm_config_set_clkdiv(&c, 2.0*divider); //CPU Base clock (after reconfig): 130.0 MHz. 130/2 = 65Mhz pixel clock
    
    //Setup autopull TX FIFO --> OSR after 32 bits have been shifted out of OSR
    sm_config_set_out_shift(&c, true, true, 32);

    //Start state machine with this configuration
    pio_sm_init(pio, sm, offset, &c);
}

%}