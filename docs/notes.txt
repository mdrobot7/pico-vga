NOTES:

http://tinyvga.com/vga-timing/640x480@60Hz

640x480 image size, 8 bit color depth, stored as RGB: 307kb -- TOO BIG!
Displaying a 640x480@60hz image: 25.175MHz pixel frequency
                                 31.46kHz vertical refresh

VGA has 15 pins, but really we only care about 5:
- Red
- Green
- Blue
- Horizontal Sync
- Vertical Sync

Challenge:
- Make an array-to-vga converter -- data is loaded into a massive 640x480x3 array (3 for r,g,b), and then displayed correctly and timed correctly.

Ben Eater Vid notes:
- You can go from full digital to 8-bit analog color with JUST RESISTORS
  - Each VGA color wants a range from 0-0.7 volts, where 0 is off and 0.7v is full brightness
  - If you do the math (or watch the vid), you can divide this range into 4, 8, or even 16 zones, and address
    them with the appropriate number of bits
  - So, if you do a 8 division (3 parallel resistors) for red and green, and a 4 division (2 resistors) for blue,
    then you can get full 8 bit color with no additional logic necessary.
  - BONUS -- it makes converting from images WAY easier.

NO DAC!
But.... it's still too big for the pico's ram.

640x480 / 2 = 320x240 line doubled (every pixel displayed twice and every line displayed twice)
Size, at 8 bit color depth: 76.8k -- GOOD!


PIO/VGA Driver notes:
- In memory:
  - Working frame -- the one that is currently being worked on by the cpu, where sprites are being moved, etc
  - Display frame -- the frame that is currently being pushed out to the monitor
  - This exists because if you are modifying a frame at the same time it is being displayed, you may cause problems 
    and accidentally access teh same piece of memory with 2 parts of the cpu at the same time
- You get 32 instructions in one PIO


VGA timing:
Time of 1 pixel (sec) = p

Current Hsync clock = p*16 = h
Front porch = h
Sync pulse = 6*h
Back porch = 3*h
Visible area = 40*h

-------------

Hsync clock = p*8 = h
Front porch = 2h
Sync pulse = 12h
Back porch = 6h
Visible area = 80h

notes from scope testing:
 - 1 less cycle of delay in visible area of hsync

 - hsync is perfect, down to a hundredth of a us, vsync is too slow by 1.3us
   - tried to adjust clock speed of pio state machine to correct -- successful

- issue: when outputting color, the frequency is WAY too slow.
  - note: is it? plug it back into a scope to see. period of alternating line graph should be 2x line time
  - note: the fastest signal that you can make with PIO (125MHz sys_clk) is 62.5MHz, I think? Because CPU
    only executes on the rising OR falling edge of sys_clk, and it takes 2 instructions to get the signal
    (pin turn on, pin turn off), you are left with half of the frequency

-----------------------

Hardware:

Using:
 - GPIO 0-7 for color (pins 1, 2, 4-7, 9, 10)
 - GPIO 8 for hsync (pin 11)
 - GPIO 9 for vsync (pin 12)

1 VGA connector (female)
3 resistors (R)
3 resistors (G)
2 resistors (B)

1 button + resistor (reset)

Pin breakouts:
 - 3.3v
 - GND
 - Aux power in (separate header)
 - reset
 - GPIO 10-28

Resistance table (R/G, 3 bits/8 states of color data):
    0 0 0 = 0v
    0 0 1 = 0.1v = 2400R
    0 1 0 = 0.2v = 1162.5R
    0 1 1 = 0.3v = 750R
    1 0 0 = 0.4v = 543.75R
    1 0 1 = 0.5v = 420R
    1 1 0 = 0.6v = 337.5R
    1 1 1 = 0.7v = 278.57R

    - Note: These numbers don't exactly line up for some reason (001 + 010 in parallel doesn't add to 011's resistance.) Don't know why, but in the vid. he just picks the closest actual resistor and it ends up closer. So that's what we're doing here.

  With real resistor values, E20 series (voltage is the actual outputted voltage):
    0 0 0 = ------ = 0v
    0 0 1 = 2200R  = 0.10879v
    0 1 0 = 1200R  = 0.19411v
    0 1 1 = 776.4R = 0.32781v -- parallel of 2200R and 1200R
    1 0 0 = 560R   = 0.38976v
    1 0 1 = 446.4R = 0.53225v -- parallel of 560R and 2200R
    1 1 0 = 381.8R = 0.61111v -- parallel of 560R and 1200R
    1 1 1 = 325.4R = 0.71739v -- parallel of all 3

    Alternate:
    1 0 0 = 503R   = 0.42820v -- 470R and 33R in series
    1 0 1 = 409.4R = 0.51094v -- parallel of 503R and 2200R
    1 1 0 = 354.4R = 0.57639v -- parallel of 503R and 1200R
    1 1 1 = 305.3R = 0.65080v -- parallel of all 3

Resistance table (B, 2 bits/4 states):
    0 0 = 0v
    0 1 = 0.23v = 1001.08R
    1 0 = 0.47v = 451.6R
    1 1 = 0.7v  = 278.57R
  
  With real resistor values (voltage is actual outputted voltage):
    0 0 = ------ = 0v
    0 1 = 1000R  = 0.23023v
    1 0 = 437R   = 0.48339v -- 390R and 47R in series
    1 1 = 304.1R = 0.65286v -- parallel of 1000R and 437R (really close to the R and G end voltages)

 BOM:
 - 1 female VGA connector
 - 40 female to male headers
 - Red channel
    - 2.2k resistor
    - 1.2k resistor
    - 470R resistor
    - 33R resistor
 - Green channel
    - 2.2k resistor
    - 1.2k resistor
    - 470R resistor
    - 33R resistor
 - Blue channel
    - 1k resistor
    - 390R resistor
    - 47R resistor
 - Reset switch
    - Pushbutton
    - 1k resistor
 - GPIO header block
    - 2x10 male header pin block (19 IOs, 1 for reset)
 - Power header block
    - 2x4 male header pin block (4 3.3v/GND pairs)
 - Aux power inputs
    - 2 right angle male header pins

 BOMv2:
  - 1 female VGA
  - Headers
     - 2x 20 female to male headers
     - 2x10 male header pin block (or 2x 10, single row)
     - 2x4 male header pin block (or 2x 4, single row)
     - 2 right angle male
  - Resistors:
     - 2x 2.2k
     - 2x 1.2k
     - 2x 1k
     - 2x 470R
     - 1x 390R
     - 1x 47R
     - 2x 33R
  - Pushbutton
  - Wire
  - Solder


