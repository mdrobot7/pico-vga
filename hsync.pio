; Drive a 320x240 @ 60Hz (upscaled to 640x480) 8-bit-color VGA signal over 5 digital IO pins.
;  - hsync.pio manages the HSYNC line of the VGA signal.

; 1 clock cycle = 16px (1/16 of pixel clock), so 40 cycles to get across screen

.program hsync

.wrap_target
    irq clear 6     ; Set the HSYNC interrupt to 0 -- tells the color state machine to start
    nop [31]        ; Line is being displayed, wait
    nop [5]         ; Line is being displayed (total 640px, 40 cycles delay, 32 + 7 + irq reset) - 1 (from real world scope testing)
    irq set 6       ; Set the HSYNC interrupt to 1 -- locks the color state machine
    nop             ; Horizontal Front Porch Delay (16px, 1 cycle)
    set pins, 0 [5] ; Sync Pulse Length (96px, 6 cycles)
    set pins, 1     ; How does the timing for this work?
    nop [1]         ; Horizontal Back Porch Delay (48px, 3 cycles, nop + 1 + set pins)
.wrap

% c-sdk {

// Helper function (for use in C program) to initialize this PIO program

static inline void hsync_program_init(PIO pio, uint sm, uint offset, uint dataPin) {
    //Initialize HSYNC pin
    pio_gpio_init(pio, dataPin);

    //Set pin to outputs
    pio_sm_set_consecutive_pindirs(pio, sm, dataPin, 1, true);

    //Get default state machine configuration
    pio_sm_config c = hsync_program_get_default_config(offset);

    //Set pin to 'set'
    sm_config_set_set_pins(&c, dataPin, 1);

    //Preset pin to HIGH
    pio_sm_set_pins(pio, sm, 1);

    //Setup FIFO
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);

    //Clear Interrupts
    pio_interrupt_clear(pio, 6);
    pio_interrupt_clear(pio, 7);
    
    //Setup state machine clock divider
    // - I want a single instruction to take as LONG as possible, while still being able to
    //   time stuff correctly
    float clkDiv = clock_get_hz(clk_sys)/(25175000.0/16.0); //25.175Mhz pixel clock / 16, now F.Porch = 1 cycle, sync = 6, B.Porch = 3
    sm_config_set_clkdiv(&c, clkDiv);
    
    //Setup autopull TX FIFO --> OSR after 32 bits have been shifted out of OSR
    sm_config_set_out_shift(&c, true, true, 32);

    //Start state machine with this configuration
    pio_sm_init(pio, sm, offset, &c);
}

%}