; Drive a 800x600 @ 60Hz 8-bit-color VGA signal (40MHz pixel frequency)
;  - hsync.pio manages the HSYNC line of the VGA signal.

.program hsync_800x600

.wrap_target
    nop [31]        ; Line is being displayed, wait
    nop [31]        ; Line is being displayed, wait
    nop [31]        ; Line is being displayed, wait
    nop [4]         ; Line is being displayed (total 800px, 100 cycles delay, 32 + 32 + 32 + 4)
    nop [3]         ; Horizontal Front Porch Delay (40px, 5 cycles)
    set pins, 1 [15] ; Sync Pulse Length (128px, 16 cycles)
    set pins, 0     ; How does the timing for this work?
    nop [9]         ; Horizontal Back Porch Delay (88px, 11 cycles, set pins + nop + 9)
.wrap

% c-sdk {

// Helper function (for use in C program) to initialize this PIO program

static inline void hsync_800x600_program_init(PIO pio, uint sm, uint offset, uint dataPin) {
    //Initialize HSYNC pin
    pio_gpio_init(pio, dataPin);

    //Set pin to outputs
    pio_sm_set_consecutive_pindirs(pio, sm, dataPin, 1, true);

    //Get default state machine configuration
    pio_sm_config c = hsync_800x600_program_get_default_config(offset);

    //Set pin to 'set'
    sm_config_set_set_pins(&c, dataPin, 1);

    //Preset pin to LOW
    pio_sm_set_pins(pio, sm, 0);

    //Setup FIFO
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    
    //Setup state machine clock divider
    // - I want a single instruction to take as LONG as possible, while still being able to
    //   time stuff correctly
    //Theoretical clock divider: 24.0 -- Base: 120MHz. /3 -> 40Mhz pixel clock / 8, now F.Porch = 5 cycles, sync = 16, B.Porch = 11
    sm_config_set_clkdiv(&c, 24.0);
    
    //Setup autopull TX FIFO --> OSR after 32 bits have been shifted out of OSR
    sm_config_set_out_shift(&c, true, true, 32);

    //Start state machine with this configuration
    pio_sm_init(pio, sm, offset, &c);
}

%}