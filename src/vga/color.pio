; Drive an 8-bit-color VGA signal over 8 digital IO pins.

.program color

.wrap_target
    out pins 8 ; Shift 8 bits of data from the OSR to the pins.
.wrap

% c-sdk {

// Helper function (for use in C program) to initialize this PIO program

static inline void color_program_init(PIO pio, uint sm, uint offset, uint data_pin, uint divider) {
    //Initialize 8 data pins for 8 bit color
    pio_gpio_init(pio, data_pin);     //B2 -- LSB (reversed because of how the RP2040 works internally)
    pio_gpio_init(pio, data_pin + 1);
    pio_gpio_init(pio, data_pin + 2);
    pio_gpio_init(pio, data_pin + 3);
    pio_gpio_init(pio, data_pin + 4);
    pio_gpio_init(pio, data_pin + 5);
    pio_gpio_init(pio, data_pin + 6);
    pio_gpio_init(pio, data_pin + 7); //R1 -- MSB

    //Set all 8 pins to outputs
    pio_sm_set_consecutive_pindirs(pio, sm, data_pin, 8, true);

    //Get default state machine configuration
    pio_sm_config c = color_program_get_default_config(offset);

    //Set all 8 pins to 'out' pins
    sm_config_set_out_pins(&c, data_pin, 8);

    //Preset pins to LOW
    pio_sm_set_pins(pio, sm, 0);

    //Setup FIFO
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);

    //Setup state machine clock divider
    sm_config_set_clkdiv(&c, divider);

    //Setup autopull TX FIFO --> OSR after 32 bits have been shifted out of OSR
    sm_config_set_out_shift(&c, true, true, 32);

    //Initialize state machine with this configuration
    pio_sm_init(pio, sm, offset, &c);
}

%}