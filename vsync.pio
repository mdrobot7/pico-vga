; Drive a 320x240 @ 60Hz (upscaled to 640x480) 8-bit-color VGA signal over 5 digital IO pins.
;  - vsync.pio manages the VSYNC line of the VGA signal.

; 1 clock cycle = 1 line, 800px including nonvisible area (1/800 of pixel clock)

.program vsync

.wrap_target
    set x 13 [31]    ; Active frame (480 lines, 480 cycles, 32 from set + 14*32 from loop) + 1 cycle from real world scope testing
    nop
waitloop:
    nop [30]         ; 32 cycle loop -- nop + 30 + jmp = 32
    jmp x-- waitloop

    nop [9]          ; Vertical Front Porch Delay (10 ln, 10 cycles)
    set pins, 0 [1]  ; Sync Pulse Length (2 ln, 2 cycles)
    set pins, 1 [31] ; Vertical Back Porch Delay (33 ln, 33 cycles, set pins + nop)
    nop
.wrap

% c-sdk {

// Helper function (for use in C program) to initialize this PIO program

static inline void vsync_program_init(PIO pio, uint sm, uint offset, uint dataPin) {
    //Initialize VSYNC pin
    pio_gpio_init(pio, dataPin);

    //Set pin to outputs
    pio_sm_set_consecutive_pindirs(pio, sm, dataPin, 1, true);

    //Get default state machine configuration
    pio_sm_config c = vsync_program_get_default_config(offset);

    //Set pin to 'set'
    sm_config_set_set_pins(&c, dataPin, 1);

    //Preset pin to HIGH
    pio_sm_set_pins(pio, sm, 1);

    //Setup FIFO
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);

    //Clear Interrupts
    pio_interrupt_clear(pio, 6);
    pio_interrupt_clear(pio, 7);
    
    //Setup state machine clock divider
    sm_config_set_clkdiv(&c, 3200.0); //Raw pixel clk div (4.0) * 800 pixels per line
    
    //Setup autopull TX FIFO --> OSR after 32 bits have been shifted out of OSR
    sm_config_set_out_shift(&c, true, true, 32);

    //Start state machine with this configuration
    pio_sm_init(pio, sm, offset, &c);
}

%}