.program blink

; Turn on LED for 100 cycles and off for 100 cycles.
; At 2 kHz, this will toggle pin at 10 Hz (200 cycles / 2000 Hz = 0.1 sec)

.wrap_target
    pull              ; Required!
    out pins, 1 [31]
    nop [31]
    nop [31]
    nop [31]
    nop [31]
    nop [31]
    nop [31]
    nop [31]
    nop [31]
    nop [31]
    nop [31]
    nop [31]
    nop [31]
    nop [31]
    nop [31]
    nop [31]
    nop [31]
    nop [31]
    nop [31]
    nop [31]
    nop [31]
    nop [31]
.wrap

% c-sdk {

// Helper function (for use in C program) to initialize this PIO program
/*void blink_program_init(PIO pio, uint sm, uint offset, uint pin, float div) {

    // Sets up state machine and wrap target. This function is automatically
    // generated in blink.pio.h.
    pio_sm_config c = blink_program_get_default_config(offset);

    // Allow PIO to control GPIO pin (as output)
    pio_gpio_init(pio, pin);

    // Connect pin to OUT pin (control with 'out' instruction)
    sm_config_set_out_pins(&c, pin, 1);

    // Set the pin direction to output (in PIO)
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
    
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);

    // Set the clock divider for the state machine
    sm_config_set_clkdiv(&c, div);

    sm_config_set_out_shift(&c, true, true, 32);

    // Load configuration and jump to start of the program
    pio_sm_init(pio, sm, offset, &c);

    pio_sm_set_enabled(pio, sm, true);
}
*/


static inline void blink_program_init(PIO pio, uint sm, uint offset, uint data_pin, float clk_div) {
    pio_gpio_init(pio, data_pin);
    pio_sm_set_consecutive_pindirs(pio, sm, data_pin, 1, true);
    pio_sm_config c = blink_program_get_default_config(offset);
    sm_config_set_out_pins(&c, data_pin, 1);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    sm_config_set_clkdiv(&c, clk_div);
    sm_config_set_out_shift(&c, true, true, 32);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

%}